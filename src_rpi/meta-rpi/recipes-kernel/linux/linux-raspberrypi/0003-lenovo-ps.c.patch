diff --git a/drivers/hwmon/pmbus/lenovo-ps.c b/drivers/hwmon/pmbus/lenovo-ps.c
new file mode 100644
index 000000000000..06053af9f3cd
--- /dev/null
+++ b/drivers/hwmon/pmbus/lenovo-ps.c
@@ -0,0 +1,250 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright 2019 Inspur Corp.
+ */
+
+#include <linux/debugfs.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pmbus.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/of_device.h>
+
+#include "pmbus.h"
+
+#define LENOVO_PS_REG_VENDOR_ID	0x99
+#define LENOVO_PS_REG_MODEL		0x9A
+#define LENOVO_PS_REG_FW_VERSION	0x9B
+#define LENOVO_PS_REG_PN		0x9C
+#define LENOVO_PS_REG_SN		0x9E
+#define LENOVO_PS_REG_HW_VERSION	0xB0
+#define LENOVO_PS_REG_MODE		0xFC
+
+#define MODE_ACTIVE		0x55
+#define MODE_STANDBY		0x0E
+#define MODE_REDUNDANCY		0x00
+
+#define MODE_ACTIVE_STRING		"active"
+#define MODE_STANDBY_STRING		"standby"
+#define MODE_REDUNDANCY_STRING		"redundancy"
+
+enum lenovo_ps_index {
+	vendor,
+	model,
+	fw_version,
+	part_number,
+	serial_number,
+	hw_version,
+	mode,
+	num_regs,
+};
+
+static const u8 lenovo_ps_regs[num_regs] = {
+	[vendor] = LENOVO_PS_REG_VENDOR_ID,
+	[model] = LENOVO_PS_REG_MODEL,
+	[fw_version] = LENOVO_PS_REG_FW_VERSION,
+	[part_number] = LENOVO_PS_REG_PN,
+	[serial_number] = LENOVO_PS_REG_SN,
+	[hw_version] = LENOVO_PS_REG_HW_VERSION,
+	[mode] = LENOVO_PS_REG_MODE,
+};
+
+static ssize_t lenovo_ps_string_show(struct device *dev,
+				 struct device_attribute *devattr,
+				 char *buf)
+{
+	u8 reg;
+	int rc;
+	char *p;
+	char data[I2C_SMBUS_BLOCK_MAX + 1];
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	reg = lenovo_ps_regs[attr->index];
+	rc = i2c_smbus_read_block_data(client, reg, data);
+	if (rc < 0)
+		return rc;
+
+	/* filled with printable characters, ending with # */
+	p = memscan(data, '#', rc);
+	*p = '\0';
+
+	return sysfs_emit(buf, "%s\n", data);
+}
+
+static ssize_t lenovo_ps_fw_version_show(struct device *dev,
+				     struct device_attribute *devattr,
+				     char *buf)
+{
+	u8 reg;
+	int rc;
+	u8 data[I2C_SMBUS_BLOCK_MAX] = { 0 };
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	reg = lenovo_ps_regs[attr->index];
+	rc = i2c_smbus_read_block_data(client, reg, data);
+	if (rc < 0)
+		return rc;
+
+	if (rc != 6)
+		return -EPROTO;
+
+	return sysfs_emit(buf, "%u.%02u%u-%u.%02u\n",
+			  data[1], data[2]/* < 100 */, data[3]/*< 10*/,
+			  data[4], data[5]/* < 100 */);
+}
+
+static ssize_t lenovo_ps_mode_show(struct device *dev,
+			       struct device_attribute *devattr, char *buf)
+{
+	u8 reg;
+	int rc;
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	reg = lenovo_ps_regs[attr->index];
+	rc = i2c_smbus_read_byte_data(client, reg);
+	if (rc < 0)
+		return rc;
+
+	switch (rc) {
+	case MODE_ACTIVE:
+		return sysfs_emit(buf, "[%s] %s %s\n",
+				  MODE_ACTIVE_STRING,
+				  MODE_STANDBY_STRING, MODE_REDUNDANCY_STRING);
+	case MODE_STANDBY:
+		return sysfs_emit(buf, "%s [%s] %s\n",
+				  MODE_ACTIVE_STRING,
+				  MODE_STANDBY_STRING, MODE_REDUNDANCY_STRING);
+	case MODE_REDUNDANCY:
+		return sysfs_emit(buf, "%s %s [%s]\n",
+				  MODE_ACTIVE_STRING,
+				  MODE_STANDBY_STRING, MODE_REDUNDANCY_STRING);
+	default:
+		return sysfs_emit(buf, "unspecified\n");
+	}
+}
+
+static ssize_t lenovo_ps_mode_store(struct device *dev,
+				struct device_attribute *devattr,
+				const char *buf, size_t count)
+{
+	u8 reg;
+	int rc;
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	reg = lenovo_ps_regs[attr->index];
+	if (sysfs_streq(MODE_STANDBY_STRING, buf)) {
+		rc = i2c_smbus_write_byte_data(client, reg,
+					       MODE_STANDBY);
+		if (rc < 0)
+			return rc;
+		return count;
+	} else if (sysfs_streq(MODE_ACTIVE_STRING, buf)) {
+		rc = i2c_smbus_write_byte_data(client, reg,
+					       MODE_ACTIVE);
+		if (rc < 0)
+			return rc;
+		return count;
+	}
+
+	return -EINVAL;
+}
+
+static SENSOR_DEVICE_ATTR_RO(vendor, lenovo_ps_string, vendor);
+static SENSOR_DEVICE_ATTR_RO(model, lenovo_ps_string, model);
+static SENSOR_DEVICE_ATTR_RO(part_number, lenovo_ps_string, part_number);
+static SENSOR_DEVICE_ATTR_RO(serial_number, lenovo_ps_string, serial_number);
+static SENSOR_DEVICE_ATTR_RO(hw_version, lenovo_ps_string, hw_version);
+static SENSOR_DEVICE_ATTR_RO(fw_version, lenovo_ps_fw_version, fw_version);
+static SENSOR_DEVICE_ATTR_RW(mode, lenovo_ps_mode, mode);
+
+static struct attribute *lenovo_ps_attrs[] = {
+	&sensor_dev_attr_vendor.dev_attr.attr,
+	&sensor_dev_attr_model.dev_attr.attr,
+	&sensor_dev_attr_part_number.dev_attr.attr,
+	&sensor_dev_attr_serial_number.dev_attr.attr,
+	&sensor_dev_attr_hw_version.dev_attr.attr,
+	&sensor_dev_attr_fw_version.dev_attr.attr,
+	&sensor_dev_attr_mode.dev_attr.attr,
+	NULL,
+};
+
+ATTRIBUTE_GROUPS(lenovo_ps);
+
+static struct pmbus_driver_info lenovo_ps_info = {
+	.pages = 1,
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_IOUT |
+		PMBUS_HAVE_IIN | PMBUS_HAVE_POUT | PMBUS_HAVE_PIN |
+		PMBUS_HAVE_FAN12 | PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2 |
+		PMBUS_HAVE_TEMP3 | PMBUS_HAVE_STATUS_VOUT |
+		PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_STATUS_INPUT |
+		PMBUS_HAVE_STATUS_TEMP | PMBUS_HAVE_STATUS_FAN12,
+	.groups = lenovo_ps_groups,
+};
+
+static struct pmbus_platform_data lenovo_ps_pdata = {
+	.flags = PMBUS_SKIP_STATUS_CHECK,
+};
+
+enum versions { 
+	ps_unknown, 
+	crps, 
+	cff4 
+};
+static const struct i2c_device_id lenovo_ps_id[] = {
+        { "crps", crps },
+        { "cff4", cff4 },
+        { "ps_unknown", ps_unknown },
+        {}
+};
+MODULE_DEVICE_TABLE(i2c, lenovo_ps_id);
+
+static int lenovo_ps_probe(struct i2c_client *client)
+{
+	printk(KERN_INFO "LENOVO PS - Adam %s, %d\n", __func__, __LINE__);
+	enum versions vs = ps_unknown;
+	const void *md = of_device_get_match_data(&client->dev);
+	const struct i2c_device_id *id = NULL;
+	if (md) {
+		vs = (enum versions)md;
+		printk(KERN_INFO "LENOVO PS - Adam %s, %d\n", __func__, __LINE__);
+	} else {
+		id = i2c_match_id(lenovo_ps_id, client);
+		if (id)
+			vs = (enum versions)id->driver_data;
+		printk(KERN_INFO "LENOVO PS - Adam %s, %d\n", __func__, __LINE__);
+	}
+	printk(KERN_INFO "LENOVO PS - Adam - VS:%d -%s[0x%02x]\n", vs, client->name, client->addr);
+	client->dev.platform_data = &lenovo_ps_pdata;
+	return pmbus_do_probe(client, &lenovo_ps_info);
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id lenovo_ps_of_match[] = {
+	{ .compatible = "lenovo,crps" },
+	{ .compatible = "lenovo,cff4" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, lenovo_ps_of_match);
+#endif
+
+static struct i2c_driver lenovo_ps_driver = {
+	.driver = {
+		.name = "lenovo_ps",
+		.of_match_table = of_match_ptr(lenovo_ps_of_match),
+	},
+	.probe_new = lenovo_ps_probe,
+	.id_table = lenovo_ps_id,
+};
+
+module_i2c_driver(lenovo_ps_driver);
+
+MODULE_AUTHOR("Adam Lin");
+MODULE_DESCRIPTION("PMBus driver for LENOVO Power System power supplies");
+MODULE_LICENSE("GPL");
+MODULE_IMPORT_NS(PMBUS);
